# Generated by Django 5.0 on 2024-01-25 11:51

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import usertype.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('company', 'Company'), ('professor', 'Professor')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', usertype.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=100)),
                ('sub_district', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('province', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=100)),
                ('address_label', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DateIntern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=100)),
                ('degree', models.CharField(max_length=100)),
                ('gpa', models.CharField(max_length=255)),
                ('english_skill', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LastJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=255)),
                ('company', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Interested_jobs', models.CharField(max_length=100)),
                ('skill_description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('professor_id', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'professor',
                'permissions': (('view_profile', 'Can view profile'), ('view_stats', 'Can view statistics')),
                'default_permissions': (),
            },
            bases=('usertype.user',),
            managers=[
                ('objects', usertype.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_name', models.CharField(max_length=100)),
                ('job_description', models.CharField(max_length=255)),
                ('job_type', models.CharField(max_length=255)),
                ('job_salary', models.CharField(max_length=255)),
                ('job_date', models.CharField(max_length=255)),
                ('time_in', models.TimeField()),
                ('time_out', models.TimeField()),
                ('job_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.address')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=50, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile/', verbose_name='Profile Image')),
                ('company_description', models.CharField(max_length=255)),
                ('Foundation_date', models.DateField()),
                ('Company_type', models.CharField(max_length=255)),
                ('number_employee', models.IntegerField()),
                ('website', models.URLField()),
                ('cemail', models.EmailField(max_length=254)),
                ('Address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.address')),
                ('add_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.addjob')),
            ],
            options={
                'verbose_name': 'company',
                'permissions': (('view_profile', 'Can view profile'), ('post_job', 'Can post job')),
                'default_permissions': (),
            },
            bases=('usertype.user',),
            managers=[
                ('objects', usertype.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('student_id', models.CharField(max_length=10, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile/', verbose_name='Profile Image')),
                ('sfirst_name', models.CharField(max_length=255)),
                ('slast_name', models.CharField(max_length=255)),
                ('nick_name', models.CharField(max_length=255)),
                ('birthdate', models.DateField(max_length=255)),
                ('gender', models.CharField(max_length=255)),
                ('semail', models.EmailField(max_length=255)),
                ('phone_number', models.CharField(max_length=255)),
                ('line_id', models.CharField(max_length=255)),
                ('website', models.URLField(max_length=255)),
                ('cv', models.URLField(max_length=255)),
                ('date_intern', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.dateintern')),
                ('education', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.education')),
                ('last_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.lastjob')),
                ('skills', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usertype.skills')),
            ],
            options={
                'verbose_name': 'student',
                'permissions': (('view_profile', 'Can view profile'),),
                'default_permissions': (),
            },
            bases=('usertype.user',),
            managers=[
                ('objects', usertype.models.CustomUserManager()),
            ],
        ),
    ]
